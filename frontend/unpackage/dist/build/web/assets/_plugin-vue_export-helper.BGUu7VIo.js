import{g as t,M as e,y as n,A as r,$ as o,j as a}from"./index-2gCYdGq0.js";function s(t){let e=0;if(0===t.length)return e;for(let n=0;n<t.length;n++){e=(e<<5)-e+t.charCodeAt(n),e&=e}return Math.abs(e)}function i(){try{const r=t("userInfo"),o=(null==r?void 0:r.id)||(null==r?void 0:r.username)||"",a=function(){try{const r=[];r.push(navigator.userAgent||""),r.push(`${screen.width}x${screen.height}`),r.push(screen.colorDepth||""),r.push((new Date).getTimezoneOffset()),r.push(navigator.language||navigator.userLanguage||""),r.push(navigator.platform||""),r.push(navigator.cookieEnabled),r.push(navigator.doNotTrack||""),navigator.plugins&&r.push(navigator.plugins.length);try{const t=document.createElement("canvas"),e=t.getContext("2d");e&&(e.textBaseline="top",e.font="14px Arial",e.fillText("fingerprint_test",2,2),r.push(t.toDataURL()))}catch(n){r.push("canvas_error")}try{const t=document.createElement("canvas"),e=t.getContext("webgl")||t.getContext("experimental-webgl");if(e){const t=e.getParameter(e.RENDERER),n=e.getParameter(e.VENDOR);r.push(`${n}|${t}`)}}catch(n){r.push("webgl_error")}let o=t("fingerprint_seed");o||(o=Math.random().toString(36).substring(2,15),e("fingerprint_seed",o)),r.push(o);return s(r.join("|").replace(/[^\x00-\x7F]/g,"_")).toString()}catch(r){return console.error("生成浏览器指纹失败:",r),Math.random().toString(36).substring(2,15)}}();let i="";i=o?`${o}_${a}`:`guest_${a}`;try{return btoa(unescape(encodeURIComponent(i)))}catch(n){return i.replace(/[^\x00-\x7F]/g,"_")}}catch(r){return console.error("获取用户唯一标识失败:",r),`unknown_${Date.now()}`}}function c(){try{return i().substring(0,8)+"..."}catch(t){return"unknown"}}function l(){var e;try{const r=t("userInfo"),o=(null==r?void 0:r.id)||(null==r?void 0:r.username)||"",a=[];if("undefined"!=typeof navigator&&navigator.userAgent&&a.push(s(navigator.userAgent).toString()),"undefined"!=typeof screen&&a.push(`${screen.width||0}x${screen.height||0}`),"undefined"!=typeof Intl)try{a.push(Intl.DateTimeFormat().resolvedOptions().timeZone.replace(/[^a-zA-Z0-9]/g,""))}catch(n){a.push("UTC")}if("undefined"!=typeof navigator){const t=navigator.language||(null==(e=navigator.languages)?void 0:e[0])||"en";a.push(t.replace(/[^a-zA-Z0-9]/g,""))}if(o){const t=o.toString().replace(/[^a-zA-Z0-9]/g,"").substring(0,10);a.push(`user_${t}`)}const i=a.join("_");return`fp_${s(i)}_${Date.now().toString(36)}`}catch(r){console.error("获取安全用户指纹失败:",r);return`safe_${Date.now().toString(36)}_${Math.random().toString(36).substring(2,8)}`}}const u=function(){const e=n({isActive:!1,intervalIds:{state:null,position:null,clients:null},lastPosition:0,lastTimestamp:null,pollInterval:3e3,positionPollInterval:5e3}),a=()=>{Object.keys(e.intervalIds).forEach((t=>{e.intervalIds[t]&&(clearInterval(e.intervalIds[t]),e.intervalIds[t]=null)})),e.isActive=!1},s=async(t,n)=>{if(e.isActive)try{const e=l();if(!/^[a-zA-Z0-9_-]+$/.test(e))throw console.error("指纹包含非ASCII字符:",e),new Error("Fingerprint contains non-ASCII characters");const a=await r({url:`${t}/api/poll/state`,method:"GET",header:{Authorization:`Bearer ${n}`,"X-User-Fingerprint":e}});if(200===a.statusCode){const t=a.data;o("poll_state_update",t)}else console.error("📊 [轮询] 播放状态请求失败:",a.statusCode,a.data)}catch(a){console.error("轮询播放状态失败:",a)}},i=async(t,n)=>{if(e.isActive)try{const a=l();if(!/^[a-zA-Z0-9_-]+$/.test(a))throw console.error("指纹包含非ASCII字符:",a),new Error("Fingerprint contains non-ASCII characters");const s=await r({url:`${t}/api/poll/position`,method:"GET",header:{Authorization:`Bearer ${n}`,"X-User-Fingerprint":a}});if(200===s.statusCode){const t=s.data;e.lastPosition=t.position,e.lastTimestamp=t.timestamp,o("poll_position_update",t)}}catch(a){console.error("轮询播放位置失败:",a)}},c=async(t,n)=>{if(e.isActive)try{const e=l();if(!/^[a-zA-Z0-9_-]+$/.test(e))throw console.error("指纹包含非ASCII字符:",e),new Error("Fingerprint contains non-ASCII characters");const a=await r({url:`${t}/api/poll/clients`,method:"GET",header:{Authorization:`Bearer ${n}`,"X-User-Fingerprint":e}});if(200===a.statusCode){const t=a.data;o("poll_clients_update",t)}else console.error("📊 [轮询] 客户端数量请求失败:",a.statusCode,a.data)}catch(a){console.error("轮询客户端数失败:",a)}};return{pollingState:e,startPolling:(n,r={})=>{e.isActive&&a(),e.isActive=!0;const o=r.stateInterval||e.pollInterval,l=r.positionInterval||e.positionPollInterval,u=r.clientsInterval||2*e.pollInterval,g=t("token");g?(s(n,g),i(n,g),c(n,g),e.intervalIds.state=setInterval((()=>s(n,g)),o),e.intervalIds.position=setInterval((()=>i(n,g)),l),e.intervalIds.clients=setInterval((()=>c(n,g)),u)):console.warn("未登录，无法启动轮询")},stopPolling:a,updatePosition:async(t,n,o)=>{if(e.isActive)try{const e=l();if(!/^[a-zA-Z0-9_-]+$/.test(e))throw console.error("指纹包含非ASCII字符:",e),new Error("Fingerprint contains non-ASCII characters");if(200===(await r({url:`${t}/api/poll/update-position`,method:"POST",header:{Authorization:`Bearer ${n}`,"Content-Type":"application/json","X-User-Fingerprint":e},data:{position:o}})).statusCode)return!0}catch(a){return console.error("更新播放位置失败:",a),!1}},updatePlayState:async(t,n,o)=>{if(e.isActive)try{const e=l();if(!/^[a-zA-Z0-9_-]+$/.test(e))throw console.error("指纹包含非ASCII字符:",e),new Error("Fingerprint contains non-ASCII characters");if(200===(await r({url:`${t}/api/poll/update-play-state`,method:"POST",header:{Authorization:`Bearer ${n}`,"Content-Type":"application/json","X-User-Fingerprint":e},data:{is_playing:o}})).statusCode)return!0}catch(a){return console.error("更新播放状态失败:",a),!1}},changeSong:async(t,e,n)=>{try{const o=l();if(!/^[a-zA-Z0-9_-]+$/.test(o))throw console.error("指纹包含非ASCII字符:",o),new Error("Fingerprint contains non-ASCII characters");const a=await r({url:`${t}/api/poll/change-song`,method:"POST",header:{Authorization:`Bearer ${e}`,"Content-Type":"application/json","X-User-Fingerprint":o},data:{index:n}});if(200===a.statusCode)return a.data;throw new Error("切换歌曲失败")}catch(o){throw console.error("切换歌曲失败:",o),o}}}}(),g=n({connected:!1,connecting:!1,serverUrl:"",userCount:0,error:null,socket:null,usingPolling:!1,heartbeatActive:!1,lastHeartbeat:null});let p=null;function h(){const n=async()=>{try{const e=t("token"),n=l();if(!e||!g.serverUrl)return!1;const a=await new Promise(((t,o)=>{r({url:`${g.serverUrl}/api/heartbeat`,method:"POST",header:{Authorization:`Bearer ${e}`,"X-User-Fingerprint":n,"Content-Type":"application/json"},success:t,fail:o,timeout:5e3})}));if(200===a.statusCode){g.lastHeartbeat=(new Date).toISOString();const t=a.data.online_count;return g.userCount!==t&&(console.log(`💓 在线用户: ${t}`),g.userCount=t),o("poll_clients_update",{connected_clients:t}),!0}return console.error("❌ 心跳失败:",a.statusCode),!1}catch(e){return console.error("❌ 心跳请求失败:",e.message||e),!1}},s=()=>{p&&clearInterval(p),g.heartbeatActive=!0,console.log("💓 启动心跳 (10秒间隔)"),n(),p=setInterval((()=>{n()}),1e4)},i=()=>{p&&(clearInterval(p),p=null),g.heartbeatActive=!1,console.log("🛑 停止心跳")},c=t=>(g.usingPolling||(g.connected,console.warn("未连接到服务器，无法发送消息")),!1),h=async t=>{try{return 200===(await r({url:`${t}/api/health`,method:"GET",timeout:5e3})).statusCode}catch(e){return console.error("健康检查失败:",e),!1}};return{connectionState:g,connect:async(t,e={})=>{if(!g.connecting&&!g.connected)try{g.connecting=!0,g.error=null,g.serverUrl=t,console.log("设置服务器地址:",t),g.usingPolling=!0,u.startPolling(t,{stateInterval:2e3,positionInterval:3e3,clientsInterval:5e3}),console.log("使用HTTP轮询模式连接服务器"),g.connected=!0,s(),g.connecting=!1,console.log("服务器连接初始化完成")}catch(n){console.error("连接服务器失败:",n),g.connecting=!1,g.error=n.message||"连接失败",g.serverUrl=t,a({title:"WebSocket连接失败，仅支持基本功能",icon:"none",duration:2e3})}},disconnect:()=>{i(),clearTimeout(null),g.usingPolling&&(u.stopPolling(),g.usingPolling=!1),g.connected=!1,g.connecting=!1,g.userCount=0},sendMessage:c,sendPlayState:t=>{c()},sendAddSong:t=>{c()},sendRemoveSong:t=>{c()},getPlaylist:async()=>{if(!g.serverUrl)throw new Error("未连接到服务器");try{if(!token)throw new Error("未登录，无法获取播放列表");const t=l();if(!/^[a-zA-Z0-9_-]+$/.test(t))throw console.error("指纹包含非ASCII字符:",t),new Error("Fingerprint contains non-ASCII characters");const e=await r({url:`${g.serverUrl}/api/songs`,method:"GET",header:{Authorization:`Bearer ${token}`,"X-User-Fingerprint":t}});if(200===e.statusCode)return console.log("📊 [播放列表] 服务器响应:",e.data),e.data;throw console.error("📊 [播放列表] 请求失败:",e.statusCode,e.data),new Error("获取播放列表失败")}catch(t){throw console.error("获取播放列表失败:",t),t}},healthCheck:h,testConnection:async t=>{try{const e=t.url+(t.port?`:${t.port}`:"");return await h(e)?{success:!0,message:"连接成功",url:e}:{success:!1,message:"服务器无响应"}}catch(e){return{success:!1,message:e.message||"连接失败"}}},saveServerConfig:async t=>{try{e("serverConfig",t);const n=t.url+(t.port?`:${t.port}`:"");return g.serverUrl=n,{success:!0,message:"配置保存成功"}}catch(n){throw new Error("保存配置失败: "+n.message)}},sendHeartbeat:n,startUserHeartbeat:s,stopUserHeartbeat:i}}const d=(t,e)=>{const n=t.__vccOpts||t;for(const[r,o]of e)n[r]=o;return n};export{d as _,l as a,c as g,h as u};
